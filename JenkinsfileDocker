#!groovy
/*
 * Copyright 2021 by Swiss Post, Information Technology Services
*
*/

@Library('pipeline-library@master') _

def BUILD_INFO = Artifactory.newBuildInfo()
def PROJECT_NAME = 'evoting-e2e-dev'

pipeline {

	agent {
		label 'apps-slaves-evoting'
	}

	options {
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '10'))
		ansiColor('xterm')
		timestamps()
	}

	stages {

		stage('Informations') {
			steps {
				step([$class: 'StashNotifier'])
				echo "--------------------------------- Build Information : ---------------------------------"
				echo "Build information : ${BUILD_INFO}"
				echo "Build name : ${BUILD_INFO.name}"
				echo "Build number : ${BUILD_INFO.number}"
				echo "Build starting date : ${BUILD_INFO.startDate}"
				echo "Maven version :"
				sh "mvn -v"
				echo "Java version :"
				sh "java -version"
				echo "Nodejs version :"
				sh "node -v"
				echo ""
				echo "---------------------------------------------------------------------------------------"
			}
		}

		stage('Build and push - base images') {

			steps {
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 's-cicd-evoting', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS']]) {
					sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS} docker.tools.post.ch"

					// RABBITMQ
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/rabbitmq:3.7 -f ./base-images/rabbitmq.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/rabbitmq:3.7"

					// JAVA
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/java:1.8 -f ./base-images/java.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/java:1.8"

					// TOMCAT-NATIVE-LIBS
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/tomcat-native-libs:evoting -f ./base-images/tomcat-native-lib.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/tomcat-native-libs:evoting"

					// TOMEE
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/tomee:8 -f ./base-images/tomee.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/tomee:8"

					// APACHE
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/apache:2.4.37 -f ./base-images/apache.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/apache:2.4.37"

					// TOMCAT
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/tomcat:8.5.72 -f ./base-images/tomcat.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/tomcat:8.5.72"

					// ORACLE - Only build
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/oraclexe:18.4.0-xe -f ./base-images/oraclexe.dockerfile ./base-images/"
					sh "echo ev/oraclexe:18.4.0-xe successfully built but not pushed on docker registry."
				}
			}
		}

		stage('Build and push - message-broker') {

			steps {
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 's-cicd-evoting', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS']]) {
					sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS} docker.tools.post.ch"

					// MESSAGE-BROKER
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/message-broker:${EVOTING_VERSION} -f ./message-broker/message-broker.dockerfile ./message-broker/"
					sh "docker push docker.tools.post.ch/ev/message-broker:${EVOTING_VERSION}"
				}
			}
		}

	}

	post {
		cleanup {
			step([$class: 'StashNotifier'])
		}
		always {
			step([$class: 'StashNotifier'])
		}
		failure {
			sendBuildMail(projectName: PROJECT_NAME, message: 'Hi, the docker base images and message-broker build and deploy has failed!!', onError: true, toCommitters: true)
		}
	}
}
