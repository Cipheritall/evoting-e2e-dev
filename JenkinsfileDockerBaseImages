#!groovy
/*
 * Copyright 2022 by Swiss Post, Information Technology Services
*
*/

@Library('pipeline-library@master') _

def BUILD_INFO = Artifactory.newBuildInfo()
def PROJECT_NAME = 'evoting-e2e-dev'

//Base images version
def RABBITMQ_VERSION = '3.7'
def JAVA_VERSION = '17'
def TOMCAT_NATIVE_LIBS_VERSION = '1.2.30'
def TOMEE_VERSION = '8'
def APACHE_VERSION = '2.4.37'
def TOMCAT_VERSION = '8.5.72'
def ORACLEEXE_VERSION = '18.4.0-xe'

pipeline {

	agent {
		label 'proxy-slave'
	}

	parameters {
		string(name: 'COMPONENTS_VERSION', defaultValue: '0.0.0', description: 'Set to the desired version.')
		booleanParam(name: 'PROD', defaultValue: false, description: 'Push on prod')
		booleanParam(name: 'INT', defaultValue: true, description: 'Push on int')
		booleanParam(name: 'ARTIFACTORY', defaultValue: true, description: 'Push on artifactory')
	}


	options {
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '10'))
		ansiColor('xterm')
		timestamps()
	}

	environment {
		https_proxy = 'outappl.pnet.ch:3128'
		http_proxy = 'outappl.pnet.ch:3128'
		no_proxy = '.pnet.ch'
		proxyHost = 'outappl.pnet.ch'
		proxyPort = '3128'
	}

	stages {

		stage('Prepare') {
			steps {
				step([$class: 'StashNotifier'])
				echo "Build information : ${BUILD_INFO}"
			}
		}

		stage('Build and push - base images on artifactory') {

			when {
				expression { params.ARTIFACTORY == true }
			}

			steps {

				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 's-cicd-evoting', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS']]) {
					sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS} docker.tools.post.ch"

					// RABBITMQ
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/rabbitmq:${RABBITMQ_VERSION} -f ./base-images/rabbitmq.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/rabbitmq:${RABBITMQ_VERSION}"

					// JAVA
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/java:${JAVA_VERSION} -f ./base-images/java17.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/java:${JAVA_VERSION}"

					// TOMCAT-NATIVE-LIBS
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/tomcat-native-libs:${TOMCAT_NATIVE_LIBS_VERSION} -f ./base-images/tomcat-native-lib.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/tomcat-native-libs:${TOMCAT_NATIVE_LIBS_VERSION}"

					// TOMEE
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/tomee:${TOMEE_VERSION} -f ./base-images/tomee17.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/tomee:${TOMEE_VERSION}"

					// APACHE
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/apache:${APACHE_VERSION} -f ./base-images/apache17.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/apache:${APACHE_VERSION}"

					// TOMCAT
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/tomcat:${TOMCAT_VERSION} -f ./base-images/tomcat17.dockerfile ./base-images/"
					sh "docker push docker.tools.post.ch/ev/tomcat:${TOMCAT_VERSION}"

					// ORACLE - Only build
					sh "docker build --build-arg DOCKER_REGISTRY=docker.tools.post.ch --no-cache --force-rm -t docker.tools.post.ch/ev/oraclexe:${ORACLEEXE_VERSION} -f ./base-images/oraclexe.dockerfile ./base-images/"
					sh "echo ev/oraclexe:${ORACLEEXE_VERSION} successfully built but not pushed on docker registry."
				}
			}
		}

		stage('Build and push - base images on gitlab int') {

			when {
				expression { params.INT == true }
			}

			steps {
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SwissPost-INTBot', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS']]) {
					sh "docker login -u ${GIT_USER} -p ${GIT_PASS} registry.gitlab.com"

					// RABBITMQ
					sh "docker build --build-arg DOCKER_REGISTRY=registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev --build-arg http_proxy=outappl.pnet.ch:3128 --build-arg https_proxy=outappl.pnet.ch:3128 --no-cache --force-rm -t registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/rabbitmq:${RABBITMQ_VERSION} -f ./base-images/rabbitmq.dockerfile ./base-images/"
					sh "docker push registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/rabbitmq:${RABBITMQ_VERSION}"

					// JAVA
					sh "docker build --build-arg DOCKER_REGISTRY=registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev --build-arg http_proxy=outappl.pnet.ch:3128 --build-arg https_proxy=outappl.pnet.ch:3128 --no-cache --force-rm -t registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/java:${JAVA_VERSION} -f ./base-images/published-base-images/java.dockerfile ./base-images"
					sh "docker push registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/java:${JAVA_VERSION}"

					// TOMCAT-NATIVE-LIBS
					sh "docker build --build-arg DOCKER_REGISTRY=registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev --build-arg http_proxy=outappl.pnet.ch:3128 --build-arg https_proxy=outappl.pnet.ch:3128 --no-cache --force-rm -t registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomcat-native-libs:${TOMCAT_NATIVE_LIBS_VERSION} -f ./base-images/published-base-images/tomcat-native-lib.dockerfile ./base-images"
					sh "docker push registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomcat-native-libs:${TOMCAT_NATIVE_LIBS_VERSION}"

					// TOMEE
					sh "docker build --build-arg DOCKER_REGISTRY=registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev --build-arg http_proxy=outappl.pnet.ch:3128 --build-arg https_proxy=outappl.pnet.ch:3128 --no-cache --force-rm -t registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomee:${TOMEE_VERSION} -f ./base-images/published-base-images/tomee.dockerfile ./base-images"
					sh "docker push registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomee:${TOMEE_VERSION}"

					// APACHE
					sh "docker build --build-arg DOCKER_REGISTRY=registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev --build-arg http_proxy=outappl.pnet.ch:3128 --build-arg https_proxy=outappl.pnet.ch:3128 --no-cache --force-rm -t registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/apache:${APACHE_VERSION} -f ./base-images/apache.dockerfile ./base-images/"
					sh "docker push registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/apache:${APACHE_VERSION}"

					// TOMCAT
					sh "docker build --build-arg DOCKER_REGISTRY=registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev --build-arg http_proxy=outappl.pnet.ch:3128 --build-arg https_proxy=outappl.pnet.ch:3128 --no-cache --force-rm -t registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomcat:${TOMCAT_VERSION} -f ./base-images/published-base-images/tomcat.dockerfile ./base-images"
					sh "docker push registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomcat:${TOMCAT_VERSION}"
				}
			}
		}

		stage('Ask password for gitlab prod') {
			steps {
				script {
					if (env.BRANCH_NAME == 'publication-develop' || env.BRANCH_NAME == 'publication-master') {
						def askpass = input(
								message: 'Please enter the password',
								parameters: [
										password(defaultValue: '',
												description: '',
												name: 'password')],
								submitterParameter: 'submitter')
						usernameVariable = askpass.submitter
						passwordVariable = askpass.password
						usernameVariable = 'SwissPost-Bot'
					} else {
						echo "No password required for integration"
					}
				}
			}
		}

		stage('Build and push - base images on gitlab prod') {

			when {
				expression { params.PROD == true }
			}

			steps {
				script {
					wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[password: "${passwordVariable}", var: 'passwordVariable']]]) {
						sh "docker login -u ${usernameVariable} -p ${passwordVariable} registry.gitlab.com"

						sh "docker pull registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomee:${TOMEE_VERSION}"
						sh "docker pull registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/h2:${COMPONENTS_VERSION}"
						sh "docker pull registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomcat:${TOMCAT_VERSION}"
						sh "docker pull registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/apache:${APACHE_VERSION}"
						sh "docker pull registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomcat-native-libs:${TOMCAT_NATIVE_LIBS_VERSION}"
						sh "docker pull registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/java:${JAVA_VERSION}"
						sh "docker pull registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/rabbitmq:${RABBITMQ_VERSION}"

						sh "docker tag registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomee:${TOMEE_VERSION} registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/tomee:${TOMEE_VERSION}"
						sh "docker tag registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/h2:${COMPONENTS_VERSION} registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/h2:${COMPONENTS_VERSION}"
						sh "docker tag registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomcat:${TOMCAT_VERSION} registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/tomcat:${TOMCAT_VERSION}"
						sh "docker tag registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/apache:${APACHE_VERSION} registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/apache:${APACHE_VERSION}"
						sh "docker tag registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/tomcat-native-libs:${TOMCAT_NATIVE_LIBS_VERSION} registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/tomcat-native-libs:${TOMCAT_NATIVE_LIBS_VERSION}"
						sh "docker tag registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/java:${JAVA_VERSION} registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/java:${JAVA_VERSION}"
						sh "docker tag registry.gitlab.com/swisspost-evoting-int/e-voting/evoting-e2e-dev/ev/rabbitmq:${RABBITMQ_VERSION} registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/rabbitmq:${RABBITMQ_VERSION}"

						sh "docker push registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/tomee:${TOMEE_VERSION}"
						sh "docker push registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/h2:${COMPONENTS_VERSION}"
						sh "docker push registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/tomcat:${TOMCAT_VERSION}"
						sh "docker push registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/apache:${APACHE_VERSION}"
						sh "docker push registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/tomcat-native-libs:${TOMCAT_NATIVE_LIBS_VERSION}"
						sh "docker push registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/java:${JAVA_VERSION}"
						sh "docker push registry.gitlab.com/swisspost-evoting/e-voting/evoting-e2e-dev/ev/rabbitmq:${RABBITMQ_VERSION}"
					}
				}
			}
		}
	}

	post {
		cleanup {
			step([$class: 'StashNotifier'])
		}
		always {
			step([$class: 'StashNotifier'])
		}
		failure {
			sendBuildMail(projectName: PROJECT_NAME, message: 'Hi, the docker base images build and deploy has failed!!', onError: true, toCommitters: true)
		}
	}
}
