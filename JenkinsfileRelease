#!groovy
/*
 * Copyright 2021 by Swiss Post, Information Technology Services
 *
 */

@Library(['pipeline-library@master', 'evoting-pipeline@master']) _

def BUILD_INFO = Artifactory.newBuildInfo()
def PROJECT_NAME = 'evoting-e2e-dev'
def SCM_URL = "https://gitit.post.ch/scm/evotinginfrastructure/evoting-e2e-dev.git"
def SCM_URL_ANON = "https://gitit.post.ch/scm/evoting-anonymized/evoting-e2e-dev.git"

pipeline {

	agent {
		label 'apps-slaves-evoting'
	}

	parameters {
		string(name: 'BRANCH_NAME', defaultValue: 'release/evoting-e2e-dev-x.x.x.x', description: 'GIT branch where the release is starting. Default is "release/evoting-e2e-dev-x.x.x.x".')
		string(name: 'RELEASE_VERSION', defaultValue: 'x.x.x.x', description: 'Set to the desired version to be released. Usually the Bugfix-Version number is bumped from the last RELEASE_VERSION eg 1.1.3.0 -> 1.1.4.0 You can get the last (tagged) RELEASE_VERSION with this cmd: git describe --abbrev=0 If you enter the value of an existing version, the Job will fail (due to duplicated tags)')
		string(name: 'NEW_SNAPSHOT_VERSION', defaultValue: 'x.x.x.x-SNAPSHOT', description: 'Set to a version higher than RELEASE_VERSION and add the suffix -SNAPSHOT eg. 1.2.0.0-SNAPSHOT')
		string(name: 'RELEASE_MESSAGE', defaultValue: 'merge release evoting-e2e-dev x.x.x.x', description: 'Set the release commit message')
		booleanParam(name: 'AUTO_MERGE', defaultValue: true, description: 'Auto merge given branch into master.')
	}

	options {
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '10'))
		ansiColor('xterm')
		timestamps()
	}

	environment {
		releaseVersion = "${inputReleaseVersion == null ? params.RELEASE_VERSION : inputReleaseVersion}"
		releaseMessage = "${inputReleaseMessage == null ? params.RELEASE_MESSAGE : inputReleaseMessage}"
		releaseBranchName = "${inputBranchName == null ? params.BRANCH_NAME : inputBranchName}"
		regularRepositoryUrl = "${SCM_URL}"
		anonymizedRepositoryUrl = "${SCM_URL_ANON}"
		projectName = "${PROJECT_NAME}"
		masterBranchName = "master"
	}

	stages {

		stage('Prepare') {
			steps {
				step([$class: 'StashNotifier'])
				script {
					currentBuild.displayName = "#${BUILD_INFO.number} : ${RELEASE_VERSION}"
					currentBuild.description = "Jenkins job to release the evoting-e2e-dev"

					cleanWs()
					clone(
							branch: BRANCH_NAME,
							url: SCM_URL,
							credentialsId: "s-cicd-evoting")
				}
			}
		}

		stage('Release') {
			steps {
				checkReleaseVersion(
						releaseVersion: releaseVersion,
						projectName: projectName)
				overwriteReleaseBranchToMaster(
						masterBranchName: masterBranchName,
						releaseBranch: releaseBranchName,
						releaseMessage: releaseMessage,
						tagName: "${projectName}-${releaseVersion}")
				push(
						branch: masterBranchName,
						url: regularRepositoryUrl,
						credentialsId: "s-cicd-evoting")
			}
		}

		stage('Anonymize') {
			steps {
				anonymization(
						gitAnonymousUserName: "SwissPost-Bot",
						gitAnonymousUserEmail: "evotingspoc@poste.ch",
						fileToRemove: "JenkinsfileRelease,JenkinsfileK8s,JenkinsfileDocker,JenkinsfileAnonymizeDevelop,docker-compose.common-internal.yml,docker-compose.h2-internal.yml,docker-compose.oracle.yml,base-images/,kubernetes/,scripts/,testdata-internal/,testdata-external/sdm/electionEvents/");
			}
		}

		stage('push target branch') {
			steps {
				forcePush(
						branch: 'pre-publication-master',
						url: SCM_URL_ANON,
						credentialsId: "s-cicd-evoting");
			}
		}
	}

	post {
		cleanup {
				step([$class: 'StashNotifier'])
		}
		always {
				step([$class: 'StashNotifier'])
		}
		failure {
			sendBuildMail(projectName: PROJECT_NAME, message: 'Hi, You broke the evoting-e2e-dev RELEASE build! Please check the problem.', onError: true, toCommitters: true)
		}
	}
}